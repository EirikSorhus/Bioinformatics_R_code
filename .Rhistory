install.packages("tidyverse")
library(tidyverse)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("enrichplot")
knitr::opts_chunk$set(echo = T,
warning = F,
message = F)
# Inkluderer n√∏dvendige pakker for analyse og visualiseringer
library(tidyverse)     # Data-manipulering og plotting
library(DESeq2)        # RNA-Seq differensiell genuttrykksanalyse
library(pheatmap)      # Lager heatmaps
library(clusterProfiler) # Funksjonell berikelsesanalyse (GO, KEGG)
library(org.Hs.eg.db)  # Human genanotasjoner
library(readr)         # Leser inn tab-separerte filer
library(STRINGdb)      # Nettverksanalyse for protein-interaksjoner
library(umap)          # Dimensjonsreduksjon for visualisering
library(igraph)        # Nettverksvisualisering
library(enrichplot)    # Plotting for berikelsesanalyse
install.packages("languageserver")
install.packages("rmarkdown")
setwd("C:\Users\47960\.vscode.r.bioinformatics")
setwd("C:/Users/47960/.vscode.r.bioinformatics")
knitr::opts_chunk$set(echo = T,
warning = F,
message = F)
library(tidyverse)
samples <- list.files("Data/AspWood/AspWood")
counts <- tibble()
for (sample in samples) {
file <- paste0("Data/AspWood/AspWood", sample, "/quant.sf")
sample.trimmed <- gsub("_sortmerna_trimmomatic", "", sample)
c <- read_tsv(file) %>%
select(Name, NumReads) %>%
rename(Genes = Name, !!sym(sample.trimmed) := NumReads)
if (sample == samples[1]) {
counts <- c
} else {
counts <- cbind(counts, c %>% select(-Genes))
}
}
samples <- list.files("Data/AspWood/AspWood")
counts <- tibble()
for (sample in samples) {
file <- paste0("Data/AspWood/AspWood/", sample, "/quant.sf")
sample.trimmed <- gsub("_sortmerna_trimmomatic", "", sample)
c <- read_tsv(file) %>%
select(Name, NumReads) %>%
rename(Genes = Name, !!sym(sample.trimmed) := NumReads)
if (sample == samples[1]) {
counts <- c
} else {
counts <- cbind(counts, c %>% select(-Genes))
}
}
dim(counts)
# Method 1
counts <- counts %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression") %>%
separate(Genes, into = c("Genes"), sep = "\\.", extra = "drop") %>%
group_by(Genes, Samples) %>%
summarise(Expression = sum(Expression)) %>%
pivot_wider(names_from = "Samples", values_from = "Expression")
# Method 2
counts <- counts %>%
separate(Genes, into = c("Genes"), sep = "\\.", extra = "drop") %>%
group_by(Genes) %>%
summarise_if(is.numeric, sum)
counts.long <- counts %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression")
ggplot(counts.long,
aes(x = Samples,
y = Expression)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90))
ggplot(counts.long,
aes(x = Samples,
y = Expression)) +
geom_boxplot(outliers = F) +
theme(axis.text.x = element_text(angle = 90))
ggplot(counts.long,
aes(x = Samples,
y = log2(Expression+1))) +
geom_boxplot(outliers = F) +
theme(axis.text.x = element_text(angle = 90)) +
labs(y = "Expression")
library(DESeq2)
counts.mat <- counts %>%
column_to_rownames(var = "Genes") %>%
as.matrix() %>%
round()
dds <- DESeq2::DESeqDataSetFromMatrix(countData = counts.mat,
colData = data.frame(conditions = as.factor(colnames(counts.mat))),
design = ~ conditions)
dds <- DESeq2::estimateSizeFactors(dds)
DESeq2::counts(dds, normalized=TRUE) %>%
as.data.frame() %>%
rownames_to_column(var = "Genes") %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression") %>%
mutate(Expression = log2(Expression + 1)) %>%
ggplot(aes(x = Samples, y = Expression)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
vst <- DESeq2::varianceStabilizingTransformation(counts.mat)
vst <- vst - min(vst)
vst %>%
as.data.frame() %>%
rownames_to_column(var = "Genes") %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression") %>%
mutate(Expression = log2(Expression + 1)^2) %>% # Squaring the log-transformed transformation to make it visually comparable to previous boxplots
ggplot(aes(x = Samples, y = Expression)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
counts.long %>%
group_by(Genes) %>%
summarise(Expression = sum(Expression)) %>%
filter(Expression < 10) -> lowgenes
# Removing genes with less than 10 mapped reads:
vst <- vst[!(rownames(vst) %in% lowgenes),]
vst %>%
as.data.frame() %>%
rownames_to_column(var = "Genes") %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression") %>%
mutate(Expression = log2(Expression + 1)) %>%
filter(Genes == "Potra2n4c9149") %>%
ggplot(aes(x = Samples,
y = Expression,
group = Genes)) +
geom_line(linewidth = 2) +
labs(y = "Expression (VST)",
title = "SUS6: Potra2n4c9149") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust=1),
panel.border = element_rect(fill=NA))
vst %>%
as.data.frame() %>%
rownames_to_column(var = "Genes") %>%
pivot_longer(cols = -Genes, names_to = "Samples", values_to = "Expression") %>%
mutate(Expression = log2(Expression + 1)) %>%
filter(Genes == "Potra2n16c30563") %>%
ggplot(aes(x = Samples,
y = Expression,
group = Genes)) +
geom_line(linewidth = 2) +
labs(y = "Expression (VST)",
title = "CDC2: Potra2n16c30563") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust=1),
panel.border = element_rect(fill=NA))
